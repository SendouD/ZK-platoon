{"noir_version":"1.0.0-beta.1+dc06d8eabeba18a9928e32477dbfa7ca5cdc8dfe","hash":14790748715401106820,"abi":{"parameters":[{"name":"vehicles","type":{"kind":"array","length":6,"type":{"kind":"string","length":1}},"visibility":"public"},{"name":"Vehicle_Response","type":{"kind":"array","length":6,"type":{"kind":"tuple","fields":[{"kind":"string","length":1},{"kind":"string","length":1}]}},"visibility":"private"},{"name":"vehicle_name","type":{"kind":"string","length":1},"visibility":"public"}],"return_type":null,"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17606912715566735194":{"error_kind":"string","string":"Assertion failed: Vehicle not found in platoon"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","file_map":{"6":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"30":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod bigint;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    /// Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    /// Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"62":{"source":"fn main(vehicles: pub [str<1>; 6], Vehicle_Response: [(str<1>, str<1>); 6], vehicle_name: pub str<1>) {\n    let mut adj_matrix: [[u8; 6]; 6] = [[0; 6]; 6];\n\n    for i in 0..6 {\n        let front = Vehicle_Response[i].0;\n        let behind = Vehicle_Response[i].1;\n\n        let vehicle_index = i;\n        let front_index = find_index(front, vehicles);\n        let behind_index = find_index(behind, vehicles);\n\n        if front_index != -1 {\n            adj_matrix[vehicle_index as u32][front_index as u32] = 1;\n        }\n\n        if behind_index != -1 {\n            adj_matrix[vehicle_index as u32][behind_index as u32] = 1;\n        }\n    }\n\n    let mut numerical_vehicle_response: [[i32; 2]; 6] = [[0; 2]; 6];\n    for i in 0..6 {\n        numerical_vehicle_response[i][0] = find_index(Vehicle_Response[i].0, vehicles);\n        numerical_vehicle_response[i][1] = find_index(Vehicle_Response[i].1, vehicles);\n    }\n\n    let (_, element) = find_max_and_ele(numerical_vehicle_response, adj_matrix);\n\n    let mut isVisited = get_platoon(numerical_vehicle_response, adj_matrix, element);\n    println(f\"{isVisited}\");\n    assert(isVisited[find_index(vehicle_name, vehicles)] == 1 , \"Assertion failed: Vehicle not found in platoon\");\n}\n\nfn get_platoon(numerical_vehicle_response: [[i32; 2]; 6], adj_matrix: [[u8; 6]; 6], element: i32) -> [u8; 6] {\n    let mut isVisited: [u8; 6] = [0; 6];\n    let mut curr = element;\n    for _ in 0..6 {\n        let mut next= -1;\n        if curr == -1 {\n            \n        } else {\n            if isVisited[curr] == 1 {\n\n            } else {\n                next = numerical_vehicle_response[curr][1];\n                if next == -1 {\n                    if curr != -1 {\n                        isVisited[curr] = 1;\n                        curr = next;\n                    }\n                } else {\n                    if adj_matrix[curr][next] == 1 {\n                        if adj_matrix[next][curr] == 1 {\n                            isVisited[curr] = 1;\n                            curr = next;\n                        } else {\n                            next = -1;\n                            isVisited[curr] = 1;\n                            curr = next;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    isVisited\n}\n\nfn find_max_and_ele(numerical_vehicle_response: [[i32; 2]; 6], adj_matrix: [[u8; 6]; 6]) -> (i32, i32) {\n    let mut max = 0;\n    let mut element = -1;\n    for i in 0..6 {\n        let mut len = 0;\n        let mut isVisited: [u8; 6] = [0; 6];\n        let mut curr: i32 = i;\n\n        for _ in 0..6 {\n            let mut next= -1;\n            if curr == -1 {\n                \n            } else {\n                if isVisited[curr] == 1 {\n\n                } else {\n                    next = numerical_vehicle_response[curr][1];\n                    if next == -1 {\n                        if curr != -1 {\n                            len = len + 1;\n                            isVisited[curr] = 1;\n                            curr = next;\n                        }\n                    } else {\n                        if adj_matrix[curr][next] == 1 {\n                            if adj_matrix[next][curr] == 1 {\n                                isVisited[curr] = 1;\n                                curr = next;\n                                len = len + 1;\n                            } else {\n                                next = -1;\n                                isVisited[curr] = 1;\n                                curr = next;\n                                len = len + 1;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if max < len {\n            max = len;\n            element = i;\n        }\n    }\n    (max, element)\n}\n\nfn find_index(vehicle: str<1>, vehicles: [str<1>; 6]) -> i32 {\n    let mut index: i32 = -1;\n    if vehicle == \"0\" {\n        -1;\n    }\n    if vehicle == \"1\" {\n        -1;\n    }\n    for i in 0..6 {\n        if vehicles[i] == vehicle {\n            index = i as i32;\n        }\n    }\n    index\n}\n\n#[test]\nfn test_main() {\n    let vehicles: [str<1>; 6] = [\"A\", \"B\", \"C\", \"n\", \"n\", \"n\"];\n\n    let Vehicle_Response: [(str<1>, str<1>); 6] = [\n        (\"0\", \"B\"),\n        (\"A\", \"C\"),\n        (\"B\", \"1\"),\n        (\"C\", \"E\"),\n        (\"D\", \"F\"),\n        (\"C\", \"1\"),\n    ];\n\n    let vehicle_name: str<1> = \"F\";\n\n    main(vehicles, Vehicle_Response, vehicle_name);\n\n}\n\n#[test]\nfn test_main1() {\n    let vehicles: [str<1>; 6] = [\"A\", \"D\", \"C\", \"B\", \"E\", \"F\"];\n\n    let Vehicle_Response: [(str<1>, str<1>); 6] = [\n        (\"0\", \"B\"),\n        (\"C\", \"E\"),\n        (\"B\", \"F\"),\n        (\"A\", \"C\"),\n        (\"D\", \"F\"),\n        (\"C\", \"1\"),\n    ];\n\n    let vehicle_name: str<1> = \"B\";\n\n    main(vehicles, Vehicle_Response, vehicle_name);\n}\n\n#[test]\nfn test_main2() {\n    let vehicles: [str<1>; 6] = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n\n    let Vehicle_Response: [(str<1>, str<1>); 6] = [\n        (\"0\", \"1\"),\n        (\"0\", \"C\"),\n        (\"B\", \"D\"),\n        (\"C\", \"E\"),\n        (\"D\", \"F\"),\n        (\"E\", \"1\"),\n    ];\n\n    let vehicle_name: str<1> = \"D\";\n\n    main(vehicles, Vehicle_Response, vehicle_name);\n}\n\n#[test(should_fail_with = \"Assertion failed: Vehicle not found in platoon\")]\nfn test_main3() {\n    let vehicles: [str<1>; 6] = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n\n    let Vehicle_Response: [(str<1>, str<1>); 6] = [\n        (\"0\", \"1\"),\n        (\"0\", \"C\"),\n        (\"B\", \"D\"),\n        (\"C\", \"E\"),\n        (\"D\", \"F\"),\n        (\"E\", \"1\"),\n    ];\n\n    let vehicle_name: str<1> = \"A\";\n    main(vehicles, Vehicle_Response, vehicle_name);\n}\n\n\n#[test(should_fail_with = \"Assertion failed: Vehicle not found in platoon\")]\nfn test_main4(){\nlet vehicles: [str<1>; 6] = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n\n    let Vehicle_Response: [(str<1>, str<1>); 6] = [\n        (\"0\", \"B\"),\n        (\"A\", \"C\"),\n        (\"B\", \"F\"),\n        (\"C\", \"E\"),\n        (\"D\", \"F\"),\n        (\"C\", \"1\"),\n    ];\n\n    let vehicle_name: str<1> = \"D\";\n\n    main(vehicles, Vehicle_Response, vehicle_name);\n\n}\n\n#[test(should_fail_with = \"Assertion failed: Vehicle not found in platoon\")]\nfn test_main5(){\nlet vehicles: [str<1>; 6] = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n\n    let Vehicle_Response: [(str<1>, str<1>); 6] = [\n        (\"0\", \"B\"),\n        (\"A\", \"C\"),\n        (\"B\", \"D\"),\n        (\"C\", \"E\"),\n        (\"D\", \"F\"),\n        (\"B\", \"1\"),\n    ];\n\n    let vehicle_name: str<1> = \"F\";\n\n    main(vehicles, Vehicle_Response, vehicle_name);\n\n}\n\n#[test(should_fail_with = \"Assertion failed: Vehicle not found in platoon\")]\nfn test_main6(){\nlet vehicles: [str<1>; 6] = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n\n    let Vehicle_Response: [(str<1>, str<1>); 6] = [\n        (\"0\", \"B\"),\n        (\"A\", \"C\"),\n        (\"B\", \"D\"),\n        (\"C\", \"E\"),\n        (\"C\", \"F\"),\n        (\"E\", \"1\"),\n    ];\n\n    let vehicle_name: str<1> = \"E\";\n\n    main(vehicles, Vehicle_Response, vehicle_name);\n\n}\n\n\n","path":"/home/ashitaka/Documents/zkp/platoon/ZK-platoon/contracts/circuits/src/main.nr"}},"names":["main"],"brillig_names":["print_unconstrained","directive_invert","directive_integer_quotient"]}